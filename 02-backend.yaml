- name: Installing nodejs e for expense project
  hosts: backend_servers
  become: yes
  vars:
    mysql_host: 172.31.25.188
    mysql_root_pwd: ExpenseApp@1
  tasks:
  - name: install python libs
    ansible.builtin.pip:
      name: "{{ item }}"
      executable: pip3.9
    loop:
      - PyMySQL
      - cryptography

  - name: Disable the nodejs module
    ansible.builtin.command:
      cmd: "dnf module disable nodejs -y" # OR we give like this also --> dnf module disable nodejs -y, with out this " "

  - name: enable nodejs:20 
    ansible.builtin.command: "dnf module enable nodejs:20 -y"

  - name: installing nodejs and mysql
    ansible.builtin.dnf:
      name: "{{ item }}"
      state: installed
    loop:
    - nodejs
    - mysql
    - zip

  - name: creat expense user 
    ansible.builtin.user:
      name: expense
      shell: /sbin/nologin
      system: true
      home: /app

  - name: create app directory if it does not exist
    ansible.builtin.file:
      path: /app
      state: directory
  
  - name: Download the application code
    ansible.builtin.get_url:
      url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
      dest: /tmp/backend.zip
  
  - name: unarchive the code
    ansible.builtin.unarchive:
      src: /tmp/backend.zip
      dest: /app
      remote_src: yes

 # BELOW COMMITED MODULE IS USED TO DOWNLOAD AND UNZIP THE CONTANT:

  # - name: Unarchive a file that needs to be downloaded # module to download and extract an archive file (in this case, a ZIP file) from a remote source directly onto the target system.
  #   ansible.builtin.unarchive:
  #     src: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
  #     dest: /app
  #     remote_src: yes # remote_src: yes indicates that the src file is a remote file (in this case, a URL), not a local file present on the control machi


  - name: Install packages based on package.json.
    community.general.npm:
      path: /app/

  - name: Copy backend.service file from ansible to remote server 
    ansible.builtin.copy:
      src: /home/ec2-user/ansible_expense_project/02-backend.service # the playbook will check for backend.service only in ansible server. if the backend.service in remote host we need mention the full path.
      dest: /etc/systemd/system/backend.service

  - name: Load the schema into database
    community.mysql.mysql_db:
  
      login_host: "{{ mysql_host  }}"
      login_user: root
      login_password: "{{ mysql_root_pwd }}"
      state: import
      target: /app/schema/backend.sql

  - name: daemon reload,enabled and restart the backend.server
    ansible.builtin.systemd_service:
      name: backend.service # here we can mention only "backend"
      daemon_reload: yes # or we can use "true insted of yes"
      enabled: yes # or we can use "true insted of yes"
      state: restarted